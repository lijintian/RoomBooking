@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <link href="~/Content/DesignRoom.css" rel="stylesheet" />

    <script src="~/Scripts/DesignRoom/GUID.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/DesignRoom/Extend.js"></script>
    <script src="~/Scripts/DesignRoom/BaseObject.js"></script>
    <script src="~/Scripts/DesignRoom/Stage.js"></script>
    <script src="~/Scripts/DesignRoom/ToolBar.js"></script>
    <script src="~/Scripts/DesignRoom/Equipment.js"></script>
    <script src="~/Scripts/DesignRoom/Room.js"></script>
    <script type="text/javascript">
        /*===========================================================================================================================*/
        var showObjType = true;

        //Global Variable Begin
        var stapArray = new Array();

        var everything=new Array();
        var loadingInterval;
        var canvas;
        var ctx;
        var currentRoom;
        var toolBar
        var stage;
        //tool尺寸
        var toolIcon
        //鼠标按下选中的工具
        var mouseDownTool;
        //鼠标按下选中的设备
        var mouseDownEquipment;
        //当前选中对象
        var currentCheckedObj;
        //当前多选工具
        var currentMultiCheckTool;
        
        var currentMultiCheckObjs = new Array();

        var sourceCount = 0;
        var totalSourceCount = 4;


        
        

        //Global Variable End

        /*===========================================================================================================================*/
        
        //Main Begin

        $(function () {
            canvas = document.getElementById("roomCanvas");
            ctx = canvas.getContext("2d");

            canvas.addEventListener("mousedown", mouseDown, false);
            canvas.addEventListener("mousemove", mouseMove, false);
            canvas.addEventListener("mouseup", mouseUp, false);
            document.addEventListener("keydown", keyDown, false);

            showLoading();
            loadingInterval = window.setInterval(load, 100);
        });

        //Main End

        /*===========================================================================================================================*/

        //Keyboard And Mouse Event Begin
        var preventDefaultKeyCode = [37, 38, 39, 40, 89, 90];

        function keyDown(ev) {
            var e = ev || window.event;
            var keyCode;
            keyCode = e.keyCode;
            
       
            if (preventDefaultKeyCode.indexOf(keyCode) >= 0)
            {
                e.preventDefault();//停止默认动作
                switch (keyCode) {
                    case 37://←   
                        keyboardLeftDown();
                        break;
                    case 38://↑
                        keyboardTopDown();
                        break
                    case 39://→
                        keyboardRightDown();
                        break
                    case 40://↓
                        keyboardButtomDown();
                        break
                    case 89://y
                        if (e.ctrlKey) {
                            keyboardCtrlYDown();
                        }
                        break;
                    case 90://z
                        if (e.ctrlKey) {
                            keyboardCtrlZDown();
                        }
                        break;

                    default:
                        document.removeEventListener("keydown", keyDown, false);
                        break
                }
            }           
            
        }
      
        function keyboardRightDown() {
            if (currentCheckedObj != null) {
                switch (currentCheckedObj.type) {
                    case Tool.name:
                      
                        break;
                    case Equipment.name:
                        var mouveUnit = 1;
                        currentCheckedObj.moveUnit(mouveUnit, 0);
                        mouveUnit = currentCheckedObj.isInObj(currentRoom) ? 0 : -1;
                        currentCheckedObj.moveUnit(mouveUnit, 0);
                        showProperty();
                        RecordStap();
                        drawEverything();
                        break;
                    case Room.name:
                      
                        break;
                    default:
                        break;
                }
            }
        }

        function keyboardTopDown() {

            if (currentCheckedObj != null) {
                switch (currentCheckedObj.type) {
                    case Tool.name:

                        break;
                    case Equipment.name:
                        var mouveUnit = -1;
                        currentCheckedObj.moveUnit(0, mouveUnit);
                        mouveUnit = currentCheckedObj.isInObj(currentRoom) ? 0 : 1;
                        currentCheckedObj.moveUnit(0, mouveUnit);
                        showProperty();
                        RecordStap();
                        drawEverything();
                        break;
                    case Room.name:

                        break;
                    default:
                        break;
                }
            }
        }

        function keyboardLeftDown() {
            if (currentCheckedObj != null) {
                switch (currentCheckedObj.type) {
                    case Tool.name:

                        break;
                    case Equipment.name:
                        var mouveUnit = -1;
                        currentCheckedObj.moveUnit(mouveUnit, 0);
                        mouveUnit = currentCheckedObj.isInObj(currentRoom) ? 0 : 1;
                        currentCheckedObj.moveUnit(mouveUnit, 0);
                        showProperty();
                        RecordStap();
                        drawEverything();
                        break;
                    case Room.name:

                        break;
                    default:
                        break;
                }
            }
        }

        function keyboardButtomDown() {
            if (currentCheckedObj != null) {
                switch (currentCheckedObj.type) {
                    case Tool.name:

                        break;
                    case Equipment.name:
                        var mouveUnit = 1;
                        currentCheckedObj.moveUnit(0, mouveUnit);
                        mouveUnit = currentCheckedObj.isInObj(currentRoom) ? 0 : -1;
                        currentCheckedObj.moveUnit(0, mouveUnit);
                        showProperty();
                        RecordStap();
                        drawEverything();
                        break;
                    case Room.name:

                        break;
                    default:
                        break;
                }
            }
        }

        function keyboardCtrlZDown()
        {
            preStap();
        }

        function keyboardCtrlYDown() {
            nextStap();
        }

        function mouseDown(ev) {
            var mousePosition = new MousePosition(ev);

            everything.sortByPositionZ();//z值高的总在数组后边
            for (var i = everything.length - 1; i >= 0; i--) {//从数据后往前找选中的对象
                if (everything[i].isContainPoint(mousePosition.position.x, mousePosition.position.y)) {
                    currentCheckedObj = everything[i];
                    break;
                }
            }

            switch (currentCheckedObj.type)
            {
                case Tool.name:
                    var position = new Position(0, 0, 0);
                    var size = new Size(30, 30);

                    switch (currentCheckedObj.toolType) {
                        case ChairTool.name:
                            var count = calculateCount(Chair.name);
                            mouseDownTool = new Chair(position, size, $("#imgChair")[0], Chair.name + count);
                            break;
                        case DeskTool.name:
                            var count = calculateCount(Desk.name);
                            mouseDownTool = new Desk(position, size, $("#imgDesk")[0], Desk.name + count);
                            break;
                        default:
                            break;
                    }
                    canvas.style.cursor = "pointer";
                    break;
                case Equipment.name:
                    mouseDownEquipment = currentCheckedObj;
                    showProperty();
                    canvas.style.cursor = "pointer";
                    break;
                case Room.name:
                    currentMultiCheckTool = new MultiChoseTool(mousePosition.position, MultiChoseTool.name);
                    break;
                default:
                    break;
            }
        }

        function mouseMove(ev) {
            var mousePosition = new MousePosition(ev);

            if (currentCheckedObj != null) {
                switch (currentCheckedObj.type) {
                    case Tool.name:
                        if (mouseDownTool != null)
                        {
                            mouseDownTool.moveTo(mousePosition.position.x - mouseDownTool.size.width / 2, mousePosition.position.y - mouseDownTool.size.height / 2);
                        }
                        break;
                    case Equipment.name:
                        if (mouseDownEquipment != null)
                        {
                            mouseDownEquipment.moveTo(mousePosition.position.x - mouseDownEquipment.size.width / 2, mousePosition.position.y - mouseDownEquipment.size.height / 2);
                            showProperty();
                        }
                        break;
                    case Room.name:
                        if (currentMultiCheckTool != null && !currentMultiCheckTool.isMouseUp) {
                            currentMultiCheckTool.setEndPosition(mousePosition.position);
                        }
                        break;
                    default:
                        break;
                }
            }
            
            drawEverything();
        }

        function mouseUp(ev) {
            var mousePosition = new MousePosition(ev);

            if (currentCheckedObj != null) {
                switch (currentCheckedObj.type) {
                    case Tool.name:
                        if (mouseDownTool != null) {
                            if (mouseDownTool.isInObj(currentRoom)) {//当前鼠标选中对象在Room对象内
                                var newObj = mouseDownTool;

                                if (everything.indexOf(newObj) < 0) {//不存在时才添加
                                    everything.push(newObj);
                                }

                                if (newObj.type == Equipment.name) {//如果是设备
                                    currentRoom.addEquipment(newObj);
                                }
                            }
                            mouseDownTool = null;
                        }
                        break;
                    case Equipment.name:
                        if (mouseDownEquipment != null) {
                            if (!mouseDownEquipment.isInObj(currentRoom)) {//移除了room
                                everything.removeElement(mouseDownEquipment);
                                currentRoom.removeEquipment(mouseDownEquipment);
                                hideProperty();
                                currentCheckedObj = null;
                            }
                            mouseDownEquipment = null;
                        }
                        break;
                    case Room.name:
                        if (currentMultiCheckTool != null) {
                            currentMultiCheckTool.setEndPosition(mousePosition.position);
                            GetCurrentMultiCheckObjs();
                            currentMultiCheckTool.isMouseUp = true;

                            if (currentMultiCheckObjs.length == 0) {
                                currentMultiCheckTool = null;
                            }
                        }
                        canvas.style.cursor = "default";
                        break;
                    default:
                        break;
                }
            }
             
            drawEverything();
            RecordStap()
        }

        //Keyboard And Mouse Event End

        /*===========================================================================================================================*/

        //Common Begin

        //加载
        function load() {
            refreshLoadPercent();
            if (sourceCount < totalSourceCount) {
                return;
            }
            else {
                window.clearInterval(loadingInterval);
                window.setTimeout(hideLoading,1000);
                generateRoom();
                drawEverything();
            }
        }

        //生产room
        function generateRoom() {
            //重新生成要清空everything
            everything = new Array();
           

            var width = $("#txtRoomWidth").val();
            var height = $("#txtRoomHeight").val();

            if (width.trim() != "") {
                width = new Number(width);
            }
            else {
                width = 0;
            }
            if (height.trim() != "") {
                height = new Number(height);
            }
            else {
                height = 0;
            }
            
            var roomWidth = width;
            var roomHeight = height;


            var stagePadding = 10;
            var stageWidth = roomWidth + 2 * stagePadding;
            var stageHeight = roomHeight + 2 * stagePadding;
            var stagePosition = new Position(70, 10);
            var stageSize = new Size(stageWidth, stageHeight);
            stage = new Stage(stagePosition, stageSize, stagePadding);
            everything.push(stage);

            //创建一个toolBar
            var toolBarPadding = 10;
            var toolBarPosition = new Position(10, 10);
            var toolBarSize = new Size(50, stageHeight);
            toolBar = new ToolBar(toolBarPosition, toolBarSize, toolBarPadding);
            everything.push(toolBar);


            var canvasWidth = stage.position.x + stage.size.width + 10;
            var canvasHeight = stage.position.y + stage.size.height + 10;

            $(canvas).attr("width", canvasWidth);
            $(canvas).attr("height", canvasHeight);
             
            var roomPosition = new Position(stage.position.x + stage.padding, stage.position.y + stage.padding);
            var roomSize = new Size(roomWidth, roomHeight);

            currentRoom = new Room(roomPosition, roomSize);

            everything.push(currentRoom);

            //currentRoom.draw();

            generateTools();
            return false;
        }

        //生成工具栏
        function generateTools() {
            toolBar.removeAllTool();
            
            toolIcon = {
                width: toolBar.size.width - 2 * toolBar.padding,
                height: toolBar.size.width - 2 * toolBar.padding,
            };

            var chairToolPosition = new Position(0, 0);
            var chairToolSize = new Size(toolIcon.width, toolIcon.height);
            var chairTool = new ChairTool(chairToolPosition, chairToolSize, $("#imgChair")[0], Chair.name);

            var deskToolPosition = new Position(0, 0);
            var deskToolSize = new Size(toolIcon.width, toolIcon.height);
            var deskTool = new DeskTool(deskToolPosition, deskToolSize, $("#imgDesk")[0], Desk.name);

            toolBar.addTool(chairTool);
            toolBar.addTool(deskTool);

            var toolX = toolBar.position.x+ toolBar.padding;
            var toolY = toolBar.padding + toolBar.position.y;


            for (var i = 0; i < toolBar.tools.length; i++) {
                toolBar.tools[i].moveTo(toolX, toolY);
                everything.push(toolBar.tools[i]);
             
                toolY += toolIcon.height + toolBar.padding;
            }

        }

        //绘制所有东西
        function drawEverything()
        {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
  
            for (var i = 0; i < everything.length; i++)
            {
                everything[i].draw();
            }

            if (currentCheckedObj != null) {

                if (currentCheckedObj.type == Equipment.name) {//当前选中了设备       
                    currentCheckedObj.check();
                }
                else {
                    hideProperty();
                }
            }
            else {
                hideProperty();
            }

            if (mouseDownTool != null)
            {
                mouseDownTool.draw();
            }
            
            if (currentMultiCheckTool != null) {
                currentMultiCheckTool.draw();
                if (currentMultiCheckObjs.length > 0) {
                    for (var i = 0; i < currentMultiCheckObjs.length; i++) {
                        showMultiEditBar();
                        currentMultiCheckObjs[i].check();
                    }
                }
            }
            else {
                hideMultiEditBar();
            }

        }

        //展示loading层
        function showLoading()
        {
            var screenHeight = document.body.offsetHeight;
            var screenWidth = document.body.offsetWidth;

            $("#divLoading").css("height", screenHeight);
            $("#divLoading").show();

        }

        //隐藏loading层
        function hideLoading() {
            $("#divLoading").hide();
        }

        //更新加载进度
        function refreshLoadPercent()
        {
            $("#divLoading").text("loading..."+ sourceCount/totalSourceCount*100 + "%");
        }
        
        //展示属性栏
        function showProperty()
        {
            if (currentCheckedObj != null)
            {
                switch (currentCheckedObj.type) {
                    case Tool.name:

                        break;
                    case Equipment.name:
                        var position = currentCheckedObj.position;
                        var size = currentCheckedObj.size;

                        $("#divProperty").css("left", position.x + size.width + canvas.offsetLeft);
                        $("#divProperty").css("top", position.y + size.height + canvas.offsetTop);

                        $("#txtPositionX").val(position.x - currentRoom.position.x);
                        $("#txtPositionY").val(position.y - currentRoom.position.y);

                        $("#txtSizeWidth").val(size.width);
                        $("#txtSizeHeight").val(size.height);

                        $("#txtId").val(currentCheckedObj.id);
                        $("#txtDisplayName").val(currentCheckedObj.displayName);

                        $("#divProperty").show();
                        break;
                    case Room.name:

                        break;
                    default:
                        break;
                }
            }
          
        }

        //隐藏属性栏
        function hideProperty()
        {
            $("#divProperty").hide();
        }

        //生效属性
        function effectProperty()
        {
            if (currentCheckedObj != null) {
                switch (currentCheckedObj.type) {
                    case Tool.name:

                        break;
                    case Equipment.name:
                        var newPositionX = new Number($("#txtPositionX").val()) + currentRoom.position.x;
                        var newPositionY = new Number($("#txtPositionY").val()) + currentRoom.position.y;

                        var newSizeWidth = new Number($("#txtSizeWidth").val());
                        var newSizeHeight = new Number($("#txtSizeHeight").val());

                        var id = $("#txtId").val();
                        var displayName = $("#txtDisplayName").val();

                        var equipment = new Equipment(new Position(newPositionX, newPositionY), new Size(newSizeWidth, newSizeHeight), null, null);
                        if (equipment.isInObj(currentRoom)) {//新的坐标在room内才生效
                            currentCheckedObj.position.x = newPositionX;
                            currentCheckedObj.position.y = newPositionY;

                            currentCheckedObj.size.width = newSizeWidth;
                            currentCheckedObj.size.height = newSizeHeight;
                            currentCheckedObj.id = id;
                            currentCheckedObj.displayName = displayName;

                            drawEverything();
                            showProperty();

                            RecordStap();

                        }
                        else {
                            alert("位置尺寸信息超出范围,请重新填写");
                        }
                        break;
                    case Room.name:

                        break;
                    default:
                        break;
                }
            }
            return false;
        }

        //记录操作步骤
        function RecordStap()
        {
            if (stapArray.length == 0) {
                stapArray.push(everything.clone());
                stapPointer = stapArray.length - 1;
            }
            else {
                var lastStap = stapArray[stapPointer];
                if (!lastStap.equal(everything))
                {
                    if (stapPointer != stapArray.length - 1)
                    {//指针不在栈顶
                        while (stapPointer < stapArray.length - 1) {//去除Pointer上的数据
                            stapArray.pop();
                        }
                    }
                   

                    stapArray.push(everything.clone());
                    if (stapArray.length > 100)
                    {//最多存储一百步步骤
                        stapArray.shift();
                    }
                    stapPointer = stapArray.length - 1;
                }
                
            }
           
        }

        //记录当前步骤指针
        var stapPointer = 0;

        //后退一步
        function preStap()
        {
            stapPointer--;

            if (stapPointer >= 0) {
                everything = stapArray[stapPointer].clone();
                
                resetCurrentObj();
               
                drawEverything();
            }
            else {
                stapPointer = 0;
            }
        }
        
        //前进一步
        function nextStap()
        {
            stapPointer++;

            if (stapPointer < stapArray.length) {
                everything = stapArray[stapPointer].clone();
                
                resetCurrentObj();

                drawEverything();
            }
            else {
                stapPointer = stapArray.length - 1;
            }
        }

        //前进一步后退一步重置当前对象
        function resetCurrentObj()
        {
            currentRoom = everything[2];

            currentRoom.removeAllEquipment();

            for (var i = 0; i < everything.length; i++) {
                if (everything[i].type == Equipment.name) {
                    currentRoom.addEquipment(everything[i]);
                }
            }

            toolBar = everything[1];

            toolBar.removeAllTool();

            for (var i = 0; i < everything.length; i++) {
                if (everything[i].type == Tool.name) {
                    toolBar.addTool(everything[i]);
                }
            }

            currentCheckedObj = null;

            currentMultiCheckTool = null;
           
            currentMultiCheckObjs = new Array();
        }

        //计算设备数量
        function calculateCount(equipmentType)
        {
            var count = 0;
            for (var i = 0; i < everything.length; i++)
            {
                if (everything[i].type == Equipment.name)
                {
                    if (everything[i].equipmentType == equipmentType)
                    {
                        count++;
                    }
                }
            }
            
            return count;
        }

        //获取多选框选中的对象
        function GetCurrentMultiCheckObjs()
        {
            currentMultiCheckObjs = new Array();
            for (var i = 0; i < everything.length; i++)
            {
                if (everything[i].type == Equipment.name)
                {
                    if (everything[i].isInObj(currentMultiCheckTool))
                    {//在多选工具内
                        currentMultiCheckObjs.push(everything[i]);
                    }
                }
            }
        }

        //展示多选编辑栏
        function showMultiEditBar() {
            if (currentMultiCheckObjs != null && currentMultiCheckObjs.length>0) {
                var position = currentMultiCheckTool.position;
                var size = currentMultiCheckTool.size;

                $("#divMultiTool").css("left", position.x + size.width + canvas.offsetLeft);
                $("#divMultiTool").css("top", position.y + size.height + canvas.offsetTop);
                
                if (currentMultiCheckObjs.isSameSize()) {
                    $("#txtMultiSizeWidth").val(currentMultiCheckObjs[0].size.width);
                    $("#txtMultiSizeHeight").val(currentMultiCheckObjs[0].size.height);
                }
                else {
                    $("#txtMultiSizeWidth").val("0");
                    $("#txtMultiSizeHeight").val("0");
                }
                if (currentMultiCheckObjs.isSameName()) {
                    $("#txtMultiDisplayName").val(currentMultiCheckObjs[0].displayName);
                }
                else {
                    $("#txtMultiDisplayName").val("");
                }

                

                $("#divMultiTool").show();
            }
        }

        //隐藏多选编辑栏
        function hideMultiEditBar() {
            $("#divMultiTool").hide();
            currentMultiCheckTool = null;
            currentMultiCheckObjs = new Array();
        }

        //生效多选编辑栏
        function effectMultiEdit() {
            if (currentMultiCheckObjs != null && currentMultiCheckObjs.length > 0) {
                  
                
                var newSizeWidth = new Number($("#txtMultiSizeWidth").val());
                var newSizeHeight = new Number($("#txtMultiSizeHeight").val());

                var displayName = $("#txtMultiDisplayName").val();

              
               
              
                for (var i = 0; i < currentMultiCheckObjs.length; i++)
                {
                    var obj = currentMultiCheckObjs[i];
                    if (newSizeWidth != 0 && newSizeHeight != 0) {
                        obj.size.width = newSizeWidth;
                        obj.size.height = newSizeHeight;
                    }
                   
                    if (displayName.trim() != null)
                    {
                        obj.displayName = displayName;
                    }
                }
                drawEverything();
                showMultiEditBar();
                RecordStap();
            }
            return false;
        }

        //多个对齐
        function multiAlign(direct) {
            if (currentMultiCheckObjs != null && currentMultiCheckObjs.length > 0) {
                switch (direct)
                {
                    case "top":
                        currentMultiCheckObjs.alignTop();
                        break;
                    case "buttom":
                        currentMultiCheckObjs.alignButtom();
                        break;
                    case "left":
                        currentMultiCheckObjs.alignLeft();
                        break;
                    case "right":
                        currentMultiCheckObjs.alignRight();
                        break;
                }
               
                drawEverything();
                showMultiEditBar();
                RecordStap();
            }
            return false;
        }

        //多个间距相同
        function multiAverage(averageType)
        {
            if (currentMultiCheckObjs != null && currentMultiCheckObjs.length > 0) {
                switch (averageType) {
                    case "horizon":
                        currentMultiCheckObjs.horizonAverage();
                        break;
                    case "vertical":
                        currentMultiCheckObjs.verticalAverage();
                        break;
                }

                drawEverything();
                showMultiEditBar();
                RecordStap();
            }
            return false;
        }
       
        

        //Common End
        /*===========================================================================================================================*/

        //todo:支持多选
    </script>
</head>
<body>
    <form>
        <div id="divLoading" style="position:absolute; width:100%; z-index:999;display:none;background-color:beige">
            loading...0%
        </div>

        <div>
            RoomWidth：<input id="txtRoomWidth" type="text" value="500" />
            RoomHeight：<input id="txtRoomHeight" type="text" value="500" />
            <input type="button" id="btnEnter" value="Enter" onclick="return generateRoom()" />
        </div>

        <div>
            <canvas id="roomCanvas" style="border:1px solid black" width="500" height="500"></canvas>
            <div id="divProperty" class="property">
                <div class="property-title">
                    <div class="property-close" onclick="hideProperty()">×</div>
                </div>
                <div class="property-area">
                    <div>Identity:</div>
                    <div>
                        <div><span>id:</span><input type="text" id="txtId" value="" /></div>
                        <div><span>name:</span><input type="text" id="txtDisplayName" value="" /></div>
                    </div>
                </div>
                <div class="property-area">
                    <div>Position:</div>
                    <div>
                        <div><span>x:</span><input type="text" id="txtPositionX" value="" />px</div>
                        <div><span>y:</span><input type="text" id="txtPositionY" value="" />px</div>
                    </div>
                </div>
                <div class="property-area">
                    <div>Size:</div>
                    <div>
                        <div><span>width:</span><input type="text"  id="txtSizeWidth" value="" />px</div>
                        <div><span>height:</span><input type="text"  id="txtSizeHeight" value="" />px</div>
                    </div>
                </div>
                
                <div class="center" >
                    <input  type="button" value="Enter" onclick="return effectProperty()" />
                </div>
            </div>

            <div id="divMultiTool" class="property">
                <div class="property-title">
                    <div class="property-close" onclick="hideMultiEditBar()">×</div>
                </div>
                <div>
                    <div onclick="multiAlign('top')" class="alignIcon" style="background-image: url('../../Source/topAlign.png');" title="Top Align"></div>
                    <div  onclick="multiAlign('buttom')" class="alignIcon" style="background-image: url('../../Source/buttomAlign.png');" title="Buttom Align"></div>
                    <div  onclick="multiAlign('left')" class="alignIcon" style=" background-image: url('../../Source/leftAlign.png');" title="Left Align"></div>
                    <div  onclick="multiAlign('right')" class="alignIcon" style="background-image: url('../../Source/rightAlign.png');" title="Right Align"></div> 
                    <div onclick="multiAverage('horizon')" class="alignIcon" style="background-image: url('../../Source/horizonAverage.png');" title="Horizon Average"></div> 
                    <div onclick="multiAverage('vertical')" class="alignIcon" style="background-image: url('../../Source/verticalAverage.png');" title="Vertical Average"></div> 
                </div>
                <div class="property-area">
                    <div>Identity:</div>
                    <div>
                        <div><span>name:</span><input type="text" id="txtMultiDisplayName" value="" /></div>
                    </div>
                </div>
                <div class="property-area">
                    <div>Size:</div>
                    <div>
                        <div><span>width:</span><input type="text" id="txtMultiSizeWidth" value="0" />px</div>
                        <div><span>height:</span><input type="text" id="txtMultiSizeHeight" value="0" />px</div>
                    </div>
                </div>

                <div class="center">
                    <input type="button" value="Enter" onclick="return effectMultiEdit()" />
                </div>
            </div>
        </div>
        <div>
            keyboard op:
            <input type="button" value="Ctrl+z" onclick="preStap()" />
            <input type="button" value="Ctrl+y" onclick="nextStap()" />
            <input type="button" value="←" onclick="keyboardLeftDown()" />
            <input type="button" value="↑" onclick="keyboardTopDown()" />
            <input type="button" value="→" onclick="keyboardRightDown()" />
            <input type="button" value="↓" onclick="keyboardButtomDown()" />
        </div>

        <div>
            <ul>
                <li>设置RoomWidth、RoomHeight按Enter按钮即可生成对应大小的Room</li>
                <li>直接拖拽ToolBar的Toll到Stage即可在Stage生成Tool</li>  
                <li>选中Stage中的对象可设置对象的属性，拖拽对象可以移动对象，对象超出Stage范围会移除对象</li>
                <li>选中Stage中的对象,使用键盘上的↑↓←→方向键可以进行位置微调</li>
                <li>使用键盘Ctrl+z回到上一步操作，Ctrl+y回到下一步操作</li>
            </ul>
        </div>

        <div id="divImg">
            <img id="imgChair" src="~/Source/Chair.png" width="0" height="0" />
            <img id="imgDesk" src="~/Source/Desk.png" width="0" height="0" />
            <img src="~/Source/buttomAlign.png" width="0" height="0"/>
            <img src="~/Source/leftAlign.png" width="0" height="0"/>
            <img src="~/Source/rightAlign.png" width="0" height="0"/>
            <img src="~/Source/topAlign.png" width="0" height="0"/>
            <script>
                $("img").each(function () {
                    this.onload = function () {
                        sourceCount++;
                    }
                })
            </script>
        </div>

    </form>
   
    
</body>
</html>
